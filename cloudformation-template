{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "MyIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {"AssumeRolePolicyDocument": {
                       "Version" : "2012-10-17",
                       "Statement": [ {
                          "Effect": "Allow",
                          "Principal": {
                             "Service": [ "lambda.amazonaws.com" ]
                          },
                          "Action": [ "sts:AssumeRole" ]
                       } ]
                    },
                                "ManagedPolicyArns": 
                    [
                        "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
                        "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
                    ],
                    "RoleName": SnsAuthLambdaRole}
        },
        "MyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile":  { "Fn::Join": ["\n", [
                        "	import boto3	",
                        "	def lambda_handler(event, context):	",
                        "	",
                        "	    #get region and account	",
                        "	    client = boto3.client('lambda')	",
                        "	    response = client.get_function(FunctionName='SnsAuthFunction')	",
                        "	    locationString = response['Code']['Location']	",
                        "	    locationArray = locationString.split('-')	",
                        "	    country=locationArray[1]	",
                        "	    region=locationArray[2]	",
                        "	    area=locationArray[3]	",
                        "	    realmString=country+'-'+region+'-'+area	",
                        "	    print realmString	",
                        "	    accountString = locationArray[7].split('/')[2]	",
                        "	    print accountString	",
                        "	",
                        "	    #get user/pass	",
                        "	    user = event['user']	",
                        "	    pwd = event['pwd']	",
                        "	    #get action	",
                        "	    action = event['action']	",
                        "	    if '-' in user or '-' in pwd:	",
                        "	        return 'username or password cannot contain a hyphen'	",
                        "	    print action +'-'+ user +'-'+ pwd	",
                        "	    snsString = 'snsAuth-'+ user +'-'+ pwd	",
                        "	",
                        "	    #if exists	",
                        "	    sns = boto3.resource('sns')	",
                        "	    topic = sns.Topic('arn:aws:sns:'+realmString+':'+accountString+':'+snsString)	",
                        "	    try: checkTopic = topic.load()	",
                        "	    except: checkTopic = ''	",
                        "	",
                        "	    #if signup, check user, then create	",
                        "	    if action == 'signup':	",
                        "	        if checkTopic is None:	",
                        "	            print 'topic exists'	",
                        "	            return 'topicExists'	",
                        "	        else:	",
                        "	            client = boto3.client('sns')	",
                        "	            response = client.create_topic(Name=snsString)	",
                        "	            print response	",
                        "	            return 'signedUp'	",
                        "	    #elif login	",
                        "	    elif action == 'login':	",
                        "	        if checkTopic is None:	",
                        "	            print 'logged in'	",
                        "	            return 'loggedIn'	",
                        "	        else:	",
                        "	            print 'auth error'	",
                        "	            return 'authError'	"
                        ]]}
                },
                "FunctionName" : SnsAuthFunction,
                "Handler" : "index.handler",
                "Role" : { "Fn::GetAtt" : ["MyIamRole", "Arn"] },
                "Runtime" : "python2.7"
            }
        },
        "MyIamUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "UserName": SnsAuthInvokeUser
            }
        },
        "MyIamPolicy": {
            "Type" : "AWS::IAM::Policy",
            "Properties" : { 
                "PolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": { "Fn::GetAtt" : ["MyLambdaFunction", "Arn"] }
                        }
                    ]
                },
                "PolicyName" : InvokeSnsAuthFunction,
                "Users": [ { "Ref" : "MyIamUser" } ]
             }
         }
    }
}
//working on creating the s3 object. I need to create a separate function to create the s3 object.
